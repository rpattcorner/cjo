{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "eCAP cjo Standalone. v1.0.0-rc.3",
    "Parameters": {
      "eCAPBucket" : {
         "Description" : "eCAP Administrative Bucket, default cjo-deploy",
         "Type" : "String",
         "MinLength": "0",
         "MaxLength": "255",
         "Default" : "cjo-deploy"
        },
        "eCAPAMIId" : {
         "Description" : "AMI for eCAP Server",
         "Type" : "String",
         "MinLength": "0",
         "MaxLength": "255",
         "Default" : "ami-e0cb4788"
        },
        "gitTestDriveTag" : {
         "Description" : "Git tag or branch to pull testdrive, default current",
         "Type" : "String",
         "MinLength": "0",
         "MaxLength": "255",
         "Default" : "v1.0.0-rc.3"
        },
        "gitECAPTag" : {
         "Description" : "Git tag or branch to pull eCAP, default blank for no pull",
         "Type" : "String",
         "MinLength": "0",
         "MaxLength": "255",
         "Default" : ""
        },
        "orbiteraCustomerName" : {
          "Description" : "The name of the customer that launches the Test Drive",
          "Type" : "String",
          "MinLength": "0",
          "MaxLength": "255",
          "Default" : "cjo-deploy"
        },
        "orbiteraCustomerEmail" : {
          "Description" : "The e-mail address of the customer that launches the Test Drive",
          "Type" : "String",
          "MinLength": "0",
          "MaxLength": "255",
          "Default" : "cjomgt@dorsetwest.com"
        },
        "orbiteraCustomerAWSAccount" : {
          "Description" : "The AWS account of the customer that launches the Test Drive",
          "Type" : "String",
          "MinLength": "0",
          "MaxLength": "255",
          "Default" : "12345678"
        },
        "orbiteraCustomerId" : {
         "Description" : "A unique numerical ID for each customer",
         "Type" : "String",
         "MinLength": "0",
         "MaxLength": "255",
         "Default" : "999"
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to eCAP Server",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern": "[-_ a-zA-Z.@0-9]*",
            "ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores.",
            "Default" : "cjo_deployer_20141108" 
        },
        "AdminIPCIDR": {
            "Description": "Initial CIDR  address for admin access, e.g.. 50.1.1.1/32,",
            "Type": "String",
            "Default" : "96.241.126.198/32"
        },
        "eCAPServerIAMRole" : {
            "Description": "Existing IAM instance profile/role for eCAP Server to access AWS Services",
            "Type": "String",
            "Default" : "cjo_deployer_role"           
        },
        "VpcCidr": {
            "Description": "CIDR address space for the VPC to be created.",
            "Type": "String",
            "Default": "10.0.0.0/16"
        },
        "eCAPServerPrivateIP": {
            "Description": "Private IP address (NOT CIDR) for the eCAP Server instance, e.g. 10.0.1.100,",
            "Type": "String",
            "Default": "10.0.0.100"
        },
        "eCAPServerInstanceType": {
            "Description": "Instance type for eCAP Master nodes.",
            "Type": "String",
            "Default": "m3.medium",
            "AllowedValues": [
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "c3.medium",
                "c3.xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type, at least medium."
        },
        "eCAPSubnetCidr": {
            "Description": "Address range for a public subnet to be created in AZ1.",
            "Type": "String",
            "Default": "10.0.0.0/24"
        },
        "TargetPublicSubnetCidr": {
            "Description": "Address range for a public subnet to be created in AZ2.",
            "Type": "String",
            "Default": "10.0.2.0/24"
        },
        "TargetPrivateSubnet1Cidr": {
            "Description": "Address range for a public subnet to be created in AZ2.",
            "Type": "String",
            "Default": "10.0.1.0/24"
        },
        "TargetPrivateSubnet2Cidr": {
            "Description": "Address range for a public subnet to be created in AZ2.",
            "Type": "String",
            "Default": "10.0.3.0/24"
        },
        "AvailabilityZone1": {
            "Description": "First AZ to use for eCAP Server and public subnet.",
            "Type": "String",
            "Default": "us-east-1d"
        },
        "AvailabilityZone2": {
            "Description": "Second AZ to use for private subnet 2",
            "Type": "String",
            "Default": "us-east-1c"
        }
    },        

    "Conditions" : {
        "DynamicECAPPull" : {
           "Fn::Not" : [{
              "Fn::Equals" : [
                 {"Ref" : "gitECAPTag"},
                 ""
              ]
           }]
        }
    },

    "Mappings": {
        "eCAPAMI": {
            "us-east-1": {
                "AMI": "FUTUREUSE"
            }
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "VpcCidr"
                },
                "InstanceTenancy": "default",
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join" : [ "", [ { "Ref" : "orbiteraCustomerName" }, "-TestDriveVPC" ]] }
                    },
                    {
                        "Key": "StackName",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                    "Key": "TestDriveCustomerName",
                        "Value": {
                            "Ref" : "orbiteraCustomerName"
                        }
                    },
                                        {
                    "Key": "TestDriveCustomerEmail",
                        "Value": {
                            "Ref" : "orbiteraCustomerEmail"
                        }
                    },
                                        {
                    "Key": "TestDriveCustomerID",
                        "Value": {
                            "Ref" : "orbiteraCustomerId"
                        }
                    },
                                        {
                    "Key": "TestDriveCustomerAccount",
                        "Value": {
                            "Ref": "orbiteraCustomerAWSAccount"
                        }
                    }
                ]
            }
        },
        "eCAPSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Ref": "AvailabilityZone1"
                },
                "CidrBlock": {
                    "Ref": "eCAPSubnetCidr"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join" : [ "", [ { "Ref" : "orbiteraCustomerName" }, "-eCAPSubnet" ]] }
                    },                    
                    {
                        "Key": "SubnetName",
                        "Value": "eCAPSubnet"
                    },
                    {
                        "Key": "NetworkVisibility",
                        "Value": "Public"
                    }
                ]
            }
        },
        "TargetPublicSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Ref": "AvailabilityZone1"
                },
                "CidrBlock": {
                    "Ref": "TargetPublicSubnetCidr"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join" : [ "", [ { "Ref" : "orbiteraCustomerName" }, "-TargetPublicSubnet" ]] }
                    }, 
                    {
                        "Key": "SubnetName",
                        "Value": "TargetPublicSubnet"
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "TargetPrivateSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Ref": "AvailabilityZone1"
                },
                "CidrBlock": {
                    "Ref": "TargetPrivateSubnet1Cidr"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join" : [ "", [ { "Ref" : "orbiteraCustomerName" }, "-TargetPrivateSubnet1" ]] }
                    }, 
                    {
                        "Key": "SubnetName",
                        "Value": "TargetPrivateSubnet1"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            }
        },
        "TargetPrivateSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Ref": "AvailabilityZone2"
                },
                "CidrBlock": {
                    "Ref": "TargetPrivateSubnet2Cidr"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join" : [ "", [ { "Ref" : "orbiteraCustomerName" }, "-TargetPrivateSubnet2" ]] }
                    }, 
                    {
                        "Key": "SubnetName",
                        "Value": "TargetPrivateSubnet2"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join" : [ "", [ { "Ref" : "orbiteraCustomerName" }, "-InternetGateway" ]] }
                    }, 
                    {
                        "Key": "StackName",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "GatewayToInternet": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join" : [ "", [ { "Ref" : "orbiteraCustomerName" }, "-PublicRouteTable" ]] }
                    }, 
                    {
                        "Key": "StackName",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "PrivateRouteTable1": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join" : [ "", [ { "Ref" : "orbiteraCustomerName" }, "-PrivateRouteTable1" ]] }
                    }, 
                    {
                        "Key": "StackName",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            }
        },
        "PrivateRouteTable2": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join" : [ "", [ { "Ref" : "orbiteraCustomerName" }, "-PrivateRouteTable2" ]] }
                    }, 
                    {
                        "Key": "StackName",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "eCAPSubnetRTAssoc": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "eCAPSubnet"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "TargetPublicSubnetRTAssoc": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "TargetPublicSubnet"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "TargetPrivateSubnet1RTAssoc": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "TargetPrivateSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable1"
                }
            }
        },
        "TargetPrivateSubnet2RTAssoc": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "TargetPrivateSubnet2"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable2"
                }
            }
        },
        "eCAPServerInstance": {
            "Type": "AWS::EC2::Instance",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                  "config" : {
                    "packages" : {
                      "yum" : {
                        "wget"        : []
                      }
                    },

                    "sources" : {
                      "/var/www/html"  : "http://ftp.drupal.org/files/projects/drupal-7.8.tar.gz",
                      "/home/ec2-user" : "http://ftp.drupal.org/files/projects/drush-7.x-4.5.tar.gz"
                    },

                    "files" : {
                      "/tmp/setup.mysql" : {
                        "content" : { "Fn::Join" : ["", [
                          "CREATE DATABASE ", { "Ref" : "orbiteraCustomerName" }, ";\n",
                          "CREATE USER '", { "Ref" : "orbiteraCustomerId" }, "'@'localhost' IDENTIFIED BY '", { "Ref" : "orbiteraCustomerAWSAccount" }, "';\n",
                          "GRANT ALL ON ", { "Ref" : "orbiteraCustomerName" }, ".* TO '", { "Ref" : "orbiteraCustomerEmail" }, "'@'localhost';\n",
                          "FLUSH PRIVILEGES;\n"
                          ]]},
                        "mode"  : "000644",
                        "owner" : "root",
                        "group" : "root"
                      }
                    },

                    "commands" : {
                        "prove" : {
                            "command" : "echo \"$MAGIC\" > test.txt",
                            "env" : { "MAGIC" : "I come from the environment!" },
                            "cwd" : "/root",
                            "test" : "test ! -e ~/test.txt",
                            "ignoreErrors" : "true"
                        },
                        "reconfigure" : {
                            "command" : "source /root/.caprc;/root/bootstrap_chef.sh -d > bootstrap.txt",
                            "env" : { "HOME" : "/root" },
                            "cwd" : "/root",
                            "test" : "test ! -e ~/bootstrap.txt",
                            "ignoreErrors" : "true"
                        },
                        "plainvault" : {
                            "command" : "source /root/.bashrc;knife vault --help",
                            "env" : { "HOME" : "/root" },
                            "cwd" : "/root",
                            "ignoreErrors" : "true"
                        },
                        "adminvault" : {
                            "command" : "source /root/.bashrc;knife vault create -V -c /root/.chef/knife.rb testdrive admin_pw {\"password\":\"oRyxUlla\"} --mode client --search \"node name:CAP-MASTER\" ",
                            "env" : { "HOME" : "/root" },
                            "cwd" : "/root",
                            "ignoreErrors" : "true"
                        },
                        "uservault" : {
                            "command" : "source /root/.bashrc;knife vault create -V -c /root/.chef/knife.rb testdrive user_pw {\"password\":\"$USER_PW\"} --mode client --search \"node name:CAP-MASTER\" ",
                            "env" : { "USER_PW" : "foo" },
                            "cwd" : "/root",
                            "ignoreErrors" : "true"
                        }
                    },

                    "services" : {
                      "sysvinit" : {
                      }
                    }
                  }
                }
              },
            "Properties": {
                "InstanceType": {
                    "Ref": "eCAPServerInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "NetworkInterfaces" : [{
                    "GroupSet"                 : [
                        {
                            "Ref": "eCAPServerSecurityGroup"
                        },
                        {
                            "Ref": "eCAPAdminSecurityGroup"
                        }
                    ],
                    "AssociatePublicIpAddress" : "true",
                    "DeviceIndex"              : "0",
                    "DeleteOnTermination"      : "true",
                    "SubnetId"                 : { "Ref" : "eCAPSubnet" }
                }],
                "SourceDestCheck": "true",

                "IamInstanceProfile": {
                    "Ref": "eCAPServerIAMRole"
                },
                "ImageId": {
                    "Ref": "eCAPAMIId"
                },
                "SecurityGroupIds": [
                    
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join" : [ "", [ { "Ref" : "orbiteraCustomerName" }, "-eCAPServerInstance" ]] }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                            "#!/bin/bash -vx\n",
                                "for ENVVAR in \"VPCID\" \"TARGET_PUBLIC_SUBNET\" \"TARGET_PRIVATE_SUBNET_1\" \"TARGET_PRIVATE_SUBNET_2\" \"TARGET_PRIVATE_ROUTETABLE_1\" \"TARGET_PRIVATE_ROUTETABLE_2\" \"TESTDRIVE_CUSTOMER_ID\" \"TESTDRIVE_CUSTOMER_EMAIL\" \"TESTDRIVE_CUSTOMER_NAME\"\n",
                                "do\n",
                                    "case $ENVVAR in\n",
                                        "\"VPCID\") ENVVAL=",
                                        {"Ref": "VPC"},
                                        ";;\n",
                                        "\"TARGET_PUBLIC_SUBNET\") ENVVAL=",
                                        {"Ref": "TargetPublicSubnet"},
                                        ";;\n",
                                        "\"TARGET_PRIVATE_SUBNET_1\") ENVVAL=",
                                        {"Ref": "TargetPrivateSubnet1"},
                                        ";;\n",
                                        "\"TARGET_PRIVATE_SUBNET_2\") ENVVAL=",
                                        {"Ref": "TargetPrivateSubnet2"},
                                        ";;\n",
                                        "\"TARGET_PRIVATE_ROUTETABLE_1\") ENVVAL=",
                                        {"Ref": "PrivateRouteTable1"},
                                        ";;\n",
                                        "\"TARGET_PRIVATE_ROUTETABLE_2\") ENVVAL=",
                                        {"Ref": "PrivateRouteTable2"},
                                        ";;\n",
                                        "\"TESTDRIVE_CUSTOMER_ID\") ENVVAL=",
                                        {"Ref": "orbiteraCustomerId"},
                                        ";;\n",
                                        "\"TESTDRIVE_CUSTOMER_EMAIL\") ENVVAL=",
                                        {"Ref": "orbiteraCustomerEmail"},
                                        ";;\n",
                                        "\"TESTDRIVE_CUSTOMER_NAME\") ENVVAL=",
                                        {"Ref": "orbiteraCustomerName"},
                                        ";;\n",
                                    "esac\n",
                                    "\n",
                                    "if   grep -q  $ENVVAR /root/.caprc;\n",
                                        "then echo \"$ENVVAR is already set, ignoring\"\n",
                                        "else echo \"$ENVVAR not set so adding it\"\n",
                                        "echo export $ENVVAR=\"\\\u0022$ENVVAL\\\u0022\" >> /root/.caprc;\n",
                                    "fi\n",
                                "done\n",

                                "# BRING SOME RESOURCES INTO USERDATA SCOPE \n",
                                "CHEF_PUBLIC_IP=`curl -s http://169.254.169.254/latest/meta-data/public-ipv4`\n",

                                "CUSTOMER_NAME=\"",
                                { "Ref" : "orbiteraCustomerName" },
                                "\" \n",
                                "ECAP_BUCKET_NAME=\"",
                                { "Ref" : "eCAPBucket" },
                                "\" \n",

                                "#SET UP SECRETS \n",
                                "genpasswd() { \n",
                                    "local l=$1 \n",
                                    "[ \"$l\" == \"\" ] && l=16 \n",
                                    "tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${l} | xargs \n",
                                "} \n",

                                "JENKINS_ADMIN_PW=`genpasswd 8` \n",
                                "USER_RO_PW=`genpasswd 8` \n",
                                "TESTDRIVE_PW=`genpasswd` \n",

                                "USERID=\"`echo \"${CUSTOMER_NAME}\" | tr -cd '[:alnum:]' | cut -c -15`\" \n",


                                "#FIX UP CAPRC\n",
                                "START_TIME=\"Start Time is: `date`\" \n",  
                                "/bin/sed -i \"s/^export CHEF_PUBLIC_IP=.*/export CHEF_PUBLIC_IP=\"\\\u0022$CHEF_PUBLIC_IP\\\u0022\"/\" /root/.caprc\n",
                                "/bin/sed -i \"s/^export HOSTNAME=.*/export HOSTNAME=\"\\\u0022$USERID\\\u0022\"/\" /root/.caprc\n",
                                "/bin/sed -i \"s/^export LOG_BUCKET_NAME=.*/export LOG_BUCKET_NAME=\"\\\u0022$ECAP_BUCKET_NAME\\\u0022\"/\" /root/.caprc\n",
                                "/bin/sed -i \"s@^chef_server_url.*@chef_server_url  \"\\\u0022https://$CHEF_PUBLIC_IP\\\u0022\"@\" /etc/chef/client.rb\n",
                                "/bin/sed -i \"s/PLACEHOLDER/$CHEF_PUBLIC_IP/g\" /etc/motd\n",

                                "source /root/.bashrc \n",

                                "# CONFIGURE THE CHEF SERVER \n",
                                "echo `date` 2>&1 /root/chefserver.out \n",
                                "chef-server-ctl reconfigure &>> /root/chefserver.out\n",
                                "echo `date` 2>&1 /root/chefserver.out \n",

                               "#SET SECURE CREDENTIALS \n",
                                "RETRY=1 \n",
                                "while [ $RETRY -lt 5 ]; do \n",
                                    "echo Retry $RETRY &>>/root/vault.out \n",
                                    "knife vault create -V -c /root/.chef/knife.rb testdrive user_creds \"{\\\"username\\\":\\\"$USERID\\\",\\\"password\\\":\\\"$USER_RO_PW\\\"}\" --mode client --search \"node name:CAP-MASTER\" &>> /root/vault.out\n",
                                    "if [ $? -eq 0 ] ; then \n",
                                        "break \n",
                                    "fi \n",
                                    "RETRY=$[RETRY+1] \n",
                                    "sleep 5 \n",
                                "done \n",
                                "knife vault show -V -c /root/.chef/knife.rb testdrive user_creds &>> /root/vault.out\n",
                        
                                "#/usr/bin/cfn-init -v -s ", { "Ref" : "AWS::StackId" }, " -r eCAPServerInstance ",
          "    --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",
                                "echo \"testdrive:$TESTDRIVE_PW\" | chpasswd \n",

                                "cat <<EOF >> /etc/rc.local \n",
                                "if [ -f /root/bootstrap.out ] \n",
                                "then \n",
                                    "echo \"No bootstrap run, already configured\" \n",
                                    "else \n",
                                     "source /root/.bashrc \n",

                                    "echo `date` &>> /root/bootstrap.out \n",
                                    "set &>> /root/bastion.out \n",
                                    "knife cookbook list &>> /root/cookbooklist.out \n",

                                    "# PULL LATEST TEST DRIVE CODE \n",
                                    "cd /opt/ecap/ecap_test_drive \n",
                                    "source /root/.caprc \n",
                                    "export HOME=\"/root\"\n",
                                    "set &>> /root/github.out \n",
                                    "git fetch &>> /root/github.out \n",
                                    "git fetch --tags &>> /root/github.out \n",
                                    "git checkout ",
                                    { "Ref" : "gitTestDriveTag" },
                                    " &>> /root/github.out \n",
                                    "git pull &>> /root/github.out \n",
                                    "cap-upload-chef-artifacts -r ecap_test_drive:",
                                    { "Ref" : "gitTestDriveTag" },
                                    " &>> /root/github.out \n",
                                    "cd /root \n",
                                    "#END Pull \n",

                                    "# PULL LATEST ECAP CODE IF DESIRED\n",
                                
                                    {"Fn::If" : [
                                        "DynamicECAPPull",
                                        "bash -x /opt/ecap/ecap_test_drive/files/updaterepository.sh CAP ",
                                        { "Ref": "AWS::NoValue" } ] 
                                    },
                                    {"Fn::If" : [
                                        "DynamicECAPPull",
                                        { "Ref" : "gitECAPTag" } ,
                                        { "Ref": "AWS::NoValue" } ] 
                                    },
                                     {"Fn::If" : [
                                        "DynamicECAPPull",
                                        "&>> /root/updatecap.out \n",
                                        { "Ref": "AWS::NoValue" } ] 
                                    },     

                                    "# SYNCHRONOUSLY CONFIGURE JENKINS \n",
                                    "source ~/.caprc &>> /root/jenkins.out \n",
                                    "cd /opt/ecap/ecap_test_drive/jenkins \n",
                                    "pwd &>> /root/jenkins.out \n",
                                    "bash setup.sh $USERID $USER_RO_PW $JENKINS_ADMIN_PW QUICKCONFIG &>> /root/jenkins.out  \n",
                                    "cd /root \n",

                                   "# DEPLOY THE BASTION \n",
                                    "cap-deploy -v /opt/ecap/ecap_test_drive/applications/bastion.json &>> /root/bastion.out \n", 
                                    "knife cookbook upload test_drive \n",
                                    "knife cookbook list &>> /root/cookbooklist.out \n",

                                    "# CREATE ROUTES TO USE THE BASTION \n",
                                    "chef-client -o test_drive &>> /root/adjust_bastion.out \n",

                                    "# CONFIGURE THE testdrive ACCOUNT \n",
                                    "cp /root/.caprc /home/testdrive/.caprc \n",
                                    "chown testdrive /home/testdrive/.caprc \n",
                                    "chgrp testdrive /home/testdrive/.caprc \n",
                                    "/bin/sed -i \"s/^PasswordAuthentication.*/PasswordAuthentication yes/\" /etc/ssh/sshd_config\n",
                                    "service sshd restart \n",
  
                                    "echo `date` &>> /root/bootstrap.out \n",
          

                                    "# RELEASE THE STACK \n",
                                    "#when this executes send the success signal and release the stack\n",
                                    "DATA_MESSAGE=\"Access your demonstration via the Jenkins interface at $CHEF_PUBLIC_IP:8090 with the username $USERID and password $USER_RO_PW\"\n",
                                    "echo \"$DATA_MESSAGE\" \n",
                                     "/usr/bin/cfn-signal -r \"Successful launch\" -d \"\\$DATA_MESSAGE\" \"", { "Ref" : "eCAPConfigCompleteHandle" }, "\"\n",
                                "fi \n",
                                "EOF"
                            ]
                        ]
                    }
                }
            }
        },
        "eCAPConfigCompleteHandle" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle",
            "Properties" : {
                }
        },
        "eCAPConfigCompleteCondition" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "eCAPServerInstance",
            "Properties" : {
                "Handle" : { "Ref" : "eCAPConfigCompleteHandle" },
                 "Timeout" : "3600"
            }
        },
        "eCAPAdminSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Access to NAT",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "AdminIPCIDR"
                        }
                    }               
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join" : [ "", [ { "Ref" : "orbiteraCustomerName" }, "-eCAPAdminSecurityGroup" ]] }
                    }
                ]   
            }
        },
        "eCAPServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Access to eCAP Server",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                {
                        "IpProtocol": "tcp",
                        "FromPort": "8080",
                        "ToPort": "8080",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8090",
                        "ToPort": "8090",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join" : [ "", [ { "Ref" : "orbiteraCustomerName" }, "-eCAPServerSecurityGroup" ]] }
                    }
                ]   
            }
        },
        "eCAPServerAllowSSHIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "eCAPServerSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "SourceSecurityGroupId": {
                    "Ref": "eCAPServerSecurityGroup"
                }
            }
        }
    },
    
    "Outputs": {
        "TestDriveJenkinsURL" : {
            "Value" :  { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "eCAPServerInstance", "PublicDnsName" ] }, ":8090" ]] },
            "Description" : "TestDrive Jenkins Interface"
        },
        "ApplicationData" : {
            "Value" : { "Fn::GetAtt" : [ "eCAPConfigCompleteCondition", "Data" ]},
            "Description" : "Information for test driver"
        },
        "eCAPDNS" : {
            "Value" : { "Fn::GetAtt" : [ "eCAPServerInstance", "PublicDnsName" ] }, 
            "Description" : "DNS Name of your eCAP server"
        },
        "eCAPServerPublicIP" : {
          "Description" : "IP Address of your eCAP Server",
          "Value" :  { "Fn::Join" : [ "", [ { "Ref" : "eCAPServerInstance" }, " (", { "Fn::GetAtt" : [ "eCAPServerInstance", "PublicIp" ] }, ")" ]] }
        },
        "UserName" : {
            "Description" : "Your testdrive username",
           "Value" :  { "Ref" : "orbiteraCustomerName" } 
        },
        "Password" : {
            "Description" : "Your testdrive username password",
           "Value" :  { "Fn::Join" : [ "", ["egtTestDrive", { "Ref" : "orbiteraCustomerId" } ]] } 
        }
    }

}